#!highlight yaml
---
heat_template_version: 2013-05-23

description: >
  Admin setup.  Prerequisite before application environments can be setup

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: cloud

  service_net_id:
    type: string
    description: the id of the service-net (for access to admin host)
    default: 9b5e09f7-1be3-4d1a-a65b-4cca1433ca79

  public_floating_id:
    type: string
    description: the id of the public-floating subnet
    default: 85abca57-4d2d-43b5-bcd3-eee47f619af8

resources:
  network:
    type: OS::Neutron::Net
    properties:
      name: private    

  subnet:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools: # requires yaml lists
        - start: 192.168.10.100
          end: 192.168.10.200
      cidr: 192.168.10.0/24
      enable_dhcp: Yes
      name: private-subnet
      network_id: {get_resource: network}

  # Ensure internet connectivity
  routergw:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  router: # Note: can only create a single router! Support option to provide router name?
    type: OS::Neutron::Router
    condition: test
    properties:
      name: router

  gateway:
    type: OS::Neutron::RouterGateway
    condition: test
    properties:
      network_id: { get_param: public_floating_id }
      router_id: {get_resource: router}

  # admin host:
  # * dual nic, service-net being the first
  #   (Use OS::Nova::Server, AWS variant doesn't like dual NICs)
  # * user data:
  #   - enable NIC2
  #   - install useful packages (EPEL)
  #   - install ansible for config management
  #   - install openstack clients
  admin:
    type: OS::Nova::Server
    properties:
      name: admin
      image: 54bc392f-7489-4071-84c8-2753e7ffec54
      flavor: GP-Small
      key_name: { get_param: key_name }
      metadata: { "group": "admin" }
      networks:
        - { network: { get_param: service_net_id }, uuid: { get_param: service_net_id } }
        - { network: { get_resource: network }, uuid: { get_resource: network } }
      user_data: |
        #!/bin/bash
        #
        # ENABLE SECOND NIC
        cat > /etc/sysconfig/network-scripts/ifcfg-eth1 <<EOF
        DEVICE=eth1
        TYPE=Ethernet
        BOOTPROTO=dhcp
        ONBOOT=yes
        EOF
        ifup eth1

        # take a breath before getting into network action.
        sleep 20 # seconds.
         
        # INSTALLING EPEL
        yum -y install wget
        wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
        mv -n epel-release-6-8.noarch.rpm //usr/local/src
        rpm -ivh /usr/local/src/epel-release-6-8.noarch.rpm
         
        # INSTALL ANSIBLE (for managing rest of our hosts)
        easy_install pip
        yum -y install gcc python-devel
        pip install ansible
        mkdir /etc/ansible
         
        # ADD ANSIBLE INVENTORY PLUGIN
        pip install python-novaclient # requires novaclient
        pip install python-heatclient
        pip install python-neutronclient
         
        # INSTALL GIT
        yum -y install git
